version: '3.4'

# Common Django template for Waterproof, Celery services below
x-common-django:
  &default-common-django
  image: waterproof/spcwaterproof:django-3.2
  build:
    context: ../../
    dockerfile: scripts_docker/spcwaterproof/django/Dockerfile
  env_file:
    - .env
  volumes:
    - static:/spcwaterproof-static/
    - media:/spcwaterproof-media/
  restart: on-failure

services:

  # Our custom django application. It includes Geonode.
  django:
    << : *default-common-django
    healthcheck:
      test: "curl --fail --silent --write-out 'HTTP CODE : %{http_code}\n' --output /dev/null http://127.0.0.1:8001/"
      interval: 60s
      timeout: 10s
      retries: 1
      start_period: 60s
    entrypoint: ["/spcwaterproof/scripts_docker/spcwaterproof/django/docker-entrypoint.sh"]
    command: "uwsgi --chdir=/spcwaterproof --module=geonode.wsgi --socket=:8000 --http=127.0.0.1:8001 --processes=5 --buffer-size=8192"

  # Celery worker that executes celery tasks created by Django.
  celery:
    << : *default-common-django
    entrypoint: []
    command: 'celery -A geonode.celery_app:app worker --without-gossip --without-mingle -Ofair -B -E --statedb=/spcwaterproof-static/worker.state -s /spcwaterproof-static/celerybeat-schedule --loglevel=INFO --concurrency=10 -n worker1@%h'

  # Nginx is serving django static and media files and proxies to django and waterproof
  nginx:
    image: waterproof/spcwaterproof:nginx-3.2
    build: ./nginx/
    environment:
      - HTTPS_HOST=${HTTPS_HOST}
      - HTTP_HOST=${HTTP_HOST}
      - HTTPS_PORT=${HTTPS_PORT}
      - HTTP_PORT=${HTTP_PORT}
      - LETSENCRYPT_MODE=${LETSENCRYPT_MODE}
      - RESOLVER=127.0.0.11
    ports:
      - "${HTTP_PORT}:80"
      - "${HTTPS_PORT}:443"
    volumes:
      - static:/spcwaterproof-static/
      - media:/spcwaterproof-media/
      - certificates:/spcwaterproof-certificates/
      - /home/skaphe/Documentos/tnc/modelos/entradas/:/home/skaphe/Documentos/tnc/modelos/entradas/
      - /home/skaphe/Documentos/tnc/modelos/salidas/:/home/skaphe/Documentos/tnc/modelos/salidas/
    restart: on-failure

  # Geoserver backend
  geoserver:
    image: waterproof/spcwaterproof:geoserver-3.2
    build: ./geoserver/
    healthcheck:
      test: "curl --fail --silent --write-out 'HTTP CODE : %{http_code}\n' --output /dev/null http://127.0.0.1:8080/geoserver/rest/workspaces/geonode.html"
      interval: 60s
      timeout: 10s
      retries: 1
      start_period: 60s
    environment:
      - INITIAL_MEMORY=${INITIAL_MEMORY}
      - MAXIMUM_MEMORY=${MAXIMUM_MEMORY}
      - HTTPS_HOST=${HTTPS_HOST}
      - HTTPS_PORT=${HTTPS_PORT}
      - HTTP_HOST=${HTTP_HOST}
      - HTTP_PORT=${HTTP_PORT}
      - ADMIN_USERNAME=${ADMIN_USERNAME}
      - ADMIN_PASSWORD=${ADMIN_PASSWORD}
      - DATABASE_URL=${DATABASE_URL}
      - GEODATABASE_URL=${DATABASE_URL}
    volumes:
      - geodatadir:/spcwaterproof-geodatadir/
    restart: on-failure

  # Gets and installs letsencrypt certificates
  letsencrypt:
    image: waterproof/spcwaterproof:letsencrypt-3.2
    build: ./letsencrypt/
    environment:
      - HTTPS_HOST=${HTTPS_HOST}
      - HTTP_HOST=${HTTP_HOST}
      - ADMIN_EMAIL=${ADMIN_EMAIL}
      - LETSENCRYPT_MODE=${LETSENCRYPT_MODE}
    volumes:
      - certificates:/spcwaterproof-certificates/
    restart: on-failure

  # dumps the non geodata db
  pgdumper_nogeo:
    container_name: dumper_${GEONODE_DATABASE}_${COMPOSE_PROJECT_NAME}
    image: waterproof/spcwaterproof:pgdumper-3.2
    build: ./pgdumper/
    volumes:
      - pgdumps:/spcwaterproof-pgdumps/
    restart: on-failure
    environment:
      - DATABASE=${GEONODE_DATABASE}
      - DATABASE_URL=postgres://${GEONODE_DATABASE_USER}:${GEONODE_DATABASE_PASSWORD}@postgres:5432/${GEONODE_DATABASE}
  
  # dumps the geodata db
  pgdumper_geo:
    container_name: dumper_${GEONODE_GEODATABASE}_${COMPOSE_PROJECT_NAME}
    image: waterproof/spcwaterproof:pgdumper-3.2
    build: ./pgdumper/
    volumes:
      - pgdumps:/spcwaterproof-pgdumps/
    restart: on-failure
    environment:
      - DATABASE=${GEONODE_GEODATABASE}
      # pgdumper needs postgis:// as connection string for the geodatabase
      - DATABASE_URL=postgres://${GEONODE_GEODATABASE_USER}:${GEONODE_GEODATABASE_PASSWORD}@postgres:5432/${GEONODE_GEODATABASE}

  rclone:
    image: waterproof/spcwaterproof:rclone-3.2
    build: ./rclone/
    environment:
      - S3_ACCESS_KEY=${S3_ACCESS_KEY}
      - S3_SECRET_KEY=${S3_SECRET_KEY}
      - S3_REGION=${S3_REGION}
      - S3_BUCKET=${S3_BUCKET}
    volumes:
      - pgdumps:/spcwaterproof-pgdumps/
      - media:/spcwaterproof-media/
      - geodatadir:/spcwaterproof-geodatadir/
    restart: on-failure

  # PostGIS database.
  postgres:
    # use waterproof official postgis 11 image
    image: waterproof/postgis:latest
    build: ./postgis/
    environment:
      # database info, ${variables} are read from .env
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - GEONODE_DATABASE=${GEONODE_DATABASE}
      - GEONODE_DATABASE_PASSWORD=${GEONODE_DATABASE_PASSWORD}
      - GEONODE_GEODATABASE=${GEONODE_GEODATABASE}
      - GEONODE_GEODATABASE_PASSWORD=${GEONODE_GEODATABASE_PASSWORD}
      - DATABASE_URL=postgres://${GEONODE_DATABASE_USER}:${GEONODE_DATABASE_PASSWORD}@postgres:5432/${GEONODE_DATABASE}
      - GEODATABASE_URL=postgis://${GEONODE_GEODATABASE_USER}:${GEONODE_GEODATABASE_PASSWORD}@postgres:5432/${GEONODE_GEODATABASE}
    volumes:
      - database:/var/lib/postgresql/data/
    restart: on-failure
    # uncomment to enable remote connections to postgres
    ports:
      - "${POSTGRES_PORT}:5432"

  # Vanilla RabbitMQ service. This is needed by celery
  rabbitmq:
    image: rabbitmq:3.7-alpine
    volumes:
      - rabbitmq:/var/lib/rabbitmq
    restart: on-failure

  wfapp_py3:
    image: wfapp_py3
    container_name: wfapp_py3_container
    build:
      context: ../../ModelosWFAPP/
      dockerfile: Dockerfile    
    environment:
      - PG_HOST=${PG_HOST}
      - PG_GEO_DATABASE=${PG_GEO_DATABASE}
      - PG_GEO_USER=${PG_GEO_USER}
      - PG_GEO_PASSWORD=${PG_GEO_PASSWORD}
      - PG_DATABASE=${PG_DATABASE}
      - PG_USER=${PG_USER}
      - PG_PASSWORD=${PG_PASSWORD}
      - PG_PORT=${PG_PORT}
      - PATH_FILES=${PATH_FILES}
      - GDAL_DATA=/usr/share/gdal
    volumes:
      # - /home/skaphe/Documentos/tnc/modelos/entradas/:/home/skaphe/Documentos/tnc/modelos/entradas/
      # - /home/skaphe/Documentos/tnc/modelos/salidas/:/home/skaphe/Documentos/tnc/modelos/salidas/
      - F:/PROYECTOS/TNC/WFAPP/modelos/entradas/:/home/skaphe/Documentos/tnc/modelos/entradas/
      - F:/PROYECTOS/TNC/WFAPP/modelos/salidas/:/home/skaphe/Documentos/tnc/modelos/salidas/    
      # - C:/ws/SKP/geonode/ModelosWFAPP:/app
    ports:
      - 8001:8001
      - 3000:3000
    #restart: on-failure

  wfapp_py2:
    image: wfapp_py2
    container_name: wfapp_py2_container
    build:
      context: ../../ModelosRIOS/
      dockerfile: Dockerfile   
    #restart: on-failure
    environment:
      - PG_HOST=${PG_HOST}
      - PG_GEO_DATABASE=${PG_GEO_DATABASE}
      - PG_GEO_USER=${PG_GEO_USER}
      - PG_GEO_PASSWORD=${PG_GEO_PASSWORD}
      - PG_DATABASE=${PG_DATABASE}
      - PG_USER=${PG_USER}
      - PG_PASSWORD=${PG_PASSWORD}
      - PG_PORT=${PG_PORT}
      - PATH_FILES=${PATH_FILES}      
    volumes:
      # - /data/global_datasets/:/home/skaphe/Documentos/tnc/modelos/entradas/
      # - /data/outputs/:/home/skaphe/Documentos/tnc/modelos/salidas/
      # - /home/skaphe/Documentos/tnc/modelos/entradas/:/home/skaphe/Documentos/tnc/modelos/entradas/
      # - /home/skaphe/Documentos/tnc/modelos/salidas/:/home/skaphe/Documentos/tnc/modelos/salidas/
      - F:/PROYECTOS/TNC/WFAPP/modelos/entradas/:/home/skaphe/Documentos/tnc/modelos/entradas/
      - F:/PROYECTOS/TNC/WFAPP/modelos/salidas/:/home/skaphe/Documentos/tnc/modelos/salidas/
      - C:/ws/SKP/geonode/ModelosRIOS:/app
    ports:
      - 5050:5050
      - 5678:5678

volumes:
  static:
  media:
  database:
  geodatadir:
  certificates:
  pgdumps:
  rabbitmq:
      
